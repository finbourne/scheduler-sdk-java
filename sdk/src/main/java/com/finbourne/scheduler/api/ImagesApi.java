/*
 * FINBOURNE Scheduler API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.scheduler.api;

import com.finbourne.scheduler.ApiCallback;
import com.finbourne.scheduler.ApiClient;
import com.finbourne.scheduler.ApiException;
import com.finbourne.scheduler.ApiResponse;
import com.finbourne.scheduler.Configuration;
import com.finbourne.scheduler.Pair;
import com.finbourne.scheduler.ProgressRequestBody;
import com.finbourne.scheduler.ProgressResponseBody;
import com.finbourne.scheduler.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.scheduler.model.Image;
import com.finbourne.scheduler.model.LusidProblemDetails;
import com.finbourne.scheduler.model.LusidValidationProblemDetails;
import com.finbourne.scheduler.model.ResourceListOfImageSummary;
import com.finbourne.scheduler.model.ResourceListOfRepository;
import com.finbourne.scheduler.model.UploadImageInstructions;
import com.finbourne.scheduler.model.UploadImageRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getImageCall(String name, final ApiCallback _callback) throws ApiException {
        return getImageCall(name,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getImageCall(String name, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageValidateBeforeCall(String name, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImage(Async)");
        }

        return getImageCall(name, _callback, opts);

    }


    private ApiResponse<Image> getImageWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(name, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<Image> getImageWithHttpInfo(String name, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(name, null, opts);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImageAsync(String name, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(name, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getImageAsync(String name, final ApiCallback<Image> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(name, _callback, opts);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetImageRequest {
        private final String name;

        private APIgetImageRequest(String name) {
            this.name = name;
        }

        /**
         * Build call for getImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImageCall(name, _callback);
        }

        /**
         * Execute getImage request
         * @return Image
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Image execute() throws ApiException {
            ApiResponse<Image> localVarResp = getImageWithHttpInfo(name);
            return localVarResp.getData();
        }

        /**
         * Execute getImage request. Use any specified configuration options to override any other configuration for this request only.
         * @return Image
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Image execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<Image> localVarResp = getImageWithHttpInfo(name, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getImage request with HTTP info returned
         * @return ApiResponse&lt;Image&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Image> executeWithHttpInfo() throws ApiException {
            return getImageWithHttpInfo(name);
        }

        /**
         * Execute getImage request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Image&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Image> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getImageWithHttpInfo(name, opts);
        }

        /**
         * Execute getImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Image> _callback) throws ApiException {
            return getImageAsync(name, _callback);
        }

        /**
         * Execute getImage request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Image> _callback, ConfigurationOptions opts) throws ApiException {
            return getImageAsync(name, _callback, opts);
        }
    }

    /**
     * GetImage: Get metadata of a Docker Image
     * 
     * @param name The name and tag of a Docker image. Format \&quot;ExampleImageName:latest\&quot; (required)
     * @return APIgetImageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetImageRequest getImage(String name) {
        return new APIgetImageRequest(name);
    }
    private okhttp3.Call listImagesCall(String name, String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listImagesCall(name, page, sortBy, start, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listImagesCall(String name, String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/repository/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImagesValidateBeforeCall(String name, String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listImages(Async)");
        }

        return listImagesCall(name, page, sortBy, start, limit, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfImageSummary> listImagesWithHttpInfo(String name, String page, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listImagesValidateBeforeCall(name, page, sortBy, start, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfImageSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfImageSummary> listImagesWithHttpInfo(String name, String page, List<String> sortBy, Integer start, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listImagesValidateBeforeCall(name, page, sortBy, start, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfImageSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listImagesAsync(String name, String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<ResourceListOfImageSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImagesValidateBeforeCall(name, page, sortBy, start, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfImageSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listImagesAsync(String name, String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<ResourceListOfImageSummary> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listImagesValidateBeforeCall(name, page, sortBy, start, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfImageSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistImagesRequest {
        private final String name;
        private String page;
        private List<String> sortBy;
        private Integer start;
        private Integer limit;
        private String filter;

        private APIlistImagesRequest(String name) {
            this.name = name;
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing images from a previous call to list images.  This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields  must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)
         * @return APIlistImagesRequest
         */
        public APIlistImagesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)
         * @return APIlistImagesRequest
         */
        public APIlistImagesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set start
         * @param start When paginating, skip this number of results. (optional)
         * @return APIlistImagesRequest
         */
        public APIlistImagesRequest start(Integer start) {
            this.start = start;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)
         * @return APIlistImagesRequest
         */
        public APIlistImagesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. (optional)
         * @return APIlistImagesRequest
         */
        public APIlistImagesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listImagesCall(name, page, sortBy, start, limit, filter, _callback);
        }

        /**
         * Execute listImages request
         * @return ResourceListOfImageSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfImageSummary execute() throws ApiException {
            ApiResponse<ResourceListOfImageSummary> localVarResp = listImagesWithHttpInfo(name, page, sortBy, start, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listImages request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfImageSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfImageSummary execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfImageSummary> localVarResp = listImagesWithHttpInfo(name, page, sortBy, start, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listImages request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfImageSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfImageSummary> executeWithHttpInfo() throws ApiException {
            return listImagesWithHttpInfo(name, page, sortBy, start, limit, filter);
        }

        /**
         * Execute listImages request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfImageSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfImageSummary> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listImagesWithHttpInfo(name, page, sortBy, start, limit, filter, opts);
        }

        /**
         * Execute listImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfImageSummary> _callback) throws ApiException {
            return listImagesAsync(name, page, sortBy, start, limit, filter, _callback);
        }

        /**
         * Execute listImages request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfImageSummary> _callback, ConfigurationOptions opts) throws ApiException {
            return listImagesAsync(name, page, sortBy, start, limit, filter, _callback, opts);
        }
    }

    /**
     * ListImages: List all images under same image repository
     * 
     * @param name The name of the Repository (required)
     * @return APIlistImagesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistImagesRequest listImages(String name) {
        return new APIlistImagesRequest(name);
    }
    private okhttp3.Call listRepositoriesCall(String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        return listRepositoriesCall(page, sortBy, start, limit, filter,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listRepositoriesCall(String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/images/repository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRepositoriesValidateBeforeCall(String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listRepositoriesCall(page, sortBy, start, limit, filter, _callback, opts);

    }


    private ApiResponse<ResourceListOfRepository> listRepositoriesWithHttpInfo(String page, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listRepositoriesValidateBeforeCall(page, sortBy, start, limit, filter, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfRepository> listRepositoriesWithHttpInfo(String page, List<String> sortBy, Integer start, Integer limit, String filter, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listRepositoriesValidateBeforeCall(page, sortBy, start, limit, filter, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfRepository>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRepositoriesAsync(String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<ResourceListOfRepository> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRepositoriesValidateBeforeCall(page, sortBy, start, limit, filter, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listRepositoriesAsync(String page, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<ResourceListOfRepository> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listRepositoriesValidateBeforeCall(page, sortBy, start, limit, filter, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfRepository>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistRepositoriesRequest {
        private String page;
        private List<String> sortBy;
        private Integer start;
        private Integer limit;
        private String filter;

        private APIlistRepositoriesRequest() {
        }

        /**
         * Set page
         * @param page The pagination token to use to continue listing images from a previous call to list images.  This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields  must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)
         * @return APIlistRepositoriesRequest
         */
        public APIlistRepositoriesRequest page(String page) {
            this.page = page;
            return this;
        }

        /**
         * Set sortBy
         * @param sortBy Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)
         * @return APIlistRepositoriesRequest
         */
        public APIlistRepositoriesRequest sortBy(List<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        /**
         * Set start
         * @param start When paginating, skip this number of results. (optional)
         * @return APIlistRepositoriesRequest
         */
        public APIlistRepositoriesRequest start(Integer start) {
            this.start = start;
            return this;
        }

        /**
         * Set limit
         * @param limit When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)
         * @return APIlistRepositoriesRequest
         */
        public APIlistRepositoriesRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set filter
         * @param filter Expression to filter the result set. (optional)
         * @return APIlistRepositoriesRequest
         */
        public APIlistRepositoriesRequest filter(String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for listRepositories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRepositoriesCall(page, sortBy, start, limit, filter, _callback);
        }

        /**
         * Execute listRepositories request
         * @return ResourceListOfRepository
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfRepository execute() throws ApiException {
            ApiResponse<ResourceListOfRepository> localVarResp = listRepositoriesWithHttpInfo(page, sortBy, start, limit, filter);
            return localVarResp.getData();
        }

        /**
         * Execute listRepositories request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfRepository
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfRepository execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfRepository> localVarResp = listRepositoriesWithHttpInfo(page, sortBy, start, limit, filter, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listRepositories request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfRepository&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfRepository> executeWithHttpInfo() throws ApiException {
            return listRepositoriesWithHttpInfo(page, sortBy, start, limit, filter);
        }

        /**
         * Execute listRepositories request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfRepository&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfRepository> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listRepositoriesWithHttpInfo(page, sortBy, start, limit, filter, opts);
        }

        /**
         * Execute listRepositories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfRepository> _callback) throws ApiException {
            return listRepositoriesAsync(page, sortBy, start, limit, filter, _callback);
        }

        /**
         * Execute listRepositories request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfRepository> _callback, ConfigurationOptions opts) throws ApiException {
            return listRepositoriesAsync(page, sortBy, start, limit, filter, _callback, opts);
        }
    }

    /**
     * ListRepositories: List all Docker image repositories
     * 
     * @return APIlistRepositoriesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistRepositoriesRequest listRepositories() {
        return new APIlistRepositoriesRequest();
    }
    private okhttp3.Call uploadImageCall(UploadImageRequest uploadImageRequest, final ApiCallback _callback) throws ApiException {
        return uploadImageCall(uploadImageRequest,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call uploadImageCall(UploadImageRequest uploadImageRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadImageRequest;

        // create path and map variables
        String localVarPath = "/api/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageValidateBeforeCall(UploadImageRequest uploadImageRequest, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'uploadImageRequest' is set
        if (uploadImageRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadImageRequest' when calling uploadImage(Async)");
        }

        return uploadImageCall(uploadImageRequest, _callback, opts);

    }


    private ApiResponse<UploadImageInstructions> uploadImageWithHttpInfo(UploadImageRequest uploadImageRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(uploadImageRequest, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UploadImageInstructions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<UploadImageInstructions> uploadImageWithHttpInfo(UploadImageRequest uploadImageRequest, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(uploadImageRequest, null, opts);
        Type localVarReturnType = new TypeToken<UploadImageInstructions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadImageAsync(UploadImageRequest uploadImageRequest, final ApiCallback<UploadImageInstructions> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(uploadImageRequest, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<UploadImageInstructions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call uploadImageAsync(UploadImageRequest uploadImageRequest, final ApiCallback<UploadImageInstructions> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(uploadImageRequest, _callback, opts);
        Type localVarReturnType = new TypeToken<UploadImageInstructions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuploadImageRequest {
        private final UploadImageRequest uploadImageRequest;

        private APIuploadImageRequest(UploadImageRequest uploadImageRequest) {
            this.uploadImageRequest = uploadImageRequest;
        }

        /**
         * Build call for uploadImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadImageCall(uploadImageRequest, _callback);
        }

        /**
         * Execute uploadImage request
         * @return UploadImageInstructions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UploadImageInstructions execute() throws ApiException {
            ApiResponse<UploadImageInstructions> localVarResp = uploadImageWithHttpInfo(uploadImageRequest);
            return localVarResp.getData();
        }

        /**
         * Execute uploadImage request. Use any specified configuration options to override any other configuration for this request only.
         * @return UploadImageInstructions
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public UploadImageInstructions execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<UploadImageInstructions> localVarResp = uploadImageWithHttpInfo(uploadImageRequest, opts);
            return localVarResp.getData();
        }

        /**
         * Execute uploadImage request with HTTP info returned
         * @return ApiResponse&lt;UploadImageInstructions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadImageInstructions> executeWithHttpInfo() throws ApiException {
            return uploadImageWithHttpInfo(uploadImageRequest);
        }

        /**
         * Execute uploadImage request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;UploadImageInstructions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadImageInstructions> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return uploadImageWithHttpInfo(uploadImageRequest, opts);
        }

        /**
         * Execute uploadImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadImageInstructions> _callback) throws ApiException {
            return uploadImageAsync(uploadImageRequest, _callback);
        }

        /**
         * Execute uploadImage request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadImageInstructions> _callback, ConfigurationOptions opts) throws ApiException {
            return uploadImageAsync(uploadImageRequest, _callback, opts);
        }
    }

    /**
     * UploadImage: Upload a Docker Image used for Scheduler jobs
     * Every image must have at least one tag. Note: your image will not be available until the returned Docker commands are executed.
     * @param uploadImageRequest Request to upload image (required)
     * @return APIuploadImageRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIuploadImageRequest uploadImage(UploadImageRequest uploadImageRequest) {
        return new APIuploadImageRequest(uploadImageRequest);
    }
}
