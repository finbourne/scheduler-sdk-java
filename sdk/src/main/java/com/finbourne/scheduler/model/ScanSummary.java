/*
 * FINBOURNE Scheduler API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.scheduler.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.scheduler.JSON;

/**
 * 
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ScanSummary {
  public static final String SERIALIZED_NAME_FIXABLE = "fixable";
  @SerializedName(SERIALIZED_NAME_FIXABLE)
  private Integer fixable;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_CRITICAL = "critical";
  @SerializedName(SERIALIZED_NAME_CRITICAL)
  private Integer critical;

  public static final String SERIALIZED_NAME_HIGH = "high";
  @SerializedName(SERIALIZED_NAME_HIGH)
  private Integer high;

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private Integer medium;

  public static final String SERIALIZED_NAME_LOW = "low";
  @SerializedName(SERIALIZED_NAME_LOW)
  private Integer low;

  public static final String SERIALIZED_NAME_NEGLIGIBLE = "negligible";
  @SerializedName(SERIALIZED_NAME_NEGLIGIBLE)
  private Integer negligible;

  public static final String SERIALIZED_NAME_UNKNOWN = "unknown";
  @SerializedName(SERIALIZED_NAME_UNKNOWN)
  private Integer unknown;

  public ScanSummary() {
  }

  public ScanSummary fixable(Integer fixable) {
    
    this.fixable = fixable;
    return this;
  }

   /**
   * The number of vulnerabilities that have a known fix
   * @return fixable
  **/
  @jakarta.annotation.Nullable
  public Integer getFixable() {
    return fixable;
  }


  public void setFixable(Integer fixable) {
    this.fixable = fixable;
  }


  public ScanSummary total(Integer total) {
    
    this.total = total;
    return this;
  }

   /**
   * The total number of vulnerabilities
   * @return total
  **/
  @jakarta.annotation.Nullable
  public Integer getTotal() {
    return total;
  }


  public void setTotal(Integer total) {
    this.total = total;
  }


  public ScanSummary critical(Integer critical) {
    
    this.critical = critical;
    return this;
  }

   /**
   * The number of Critical severity vulnerabilities
   * @return critical
  **/
  @jakarta.annotation.Nullable
  public Integer getCritical() {
    return critical;
  }


  public void setCritical(Integer critical) {
    this.critical = critical;
  }


  public ScanSummary high(Integer high) {
    
    this.high = high;
    return this;
  }

   /**
   * The number of High severity vulnerabilities
   * @return high
  **/
  @jakarta.annotation.Nullable
  public Integer getHigh() {
    return high;
  }


  public void setHigh(Integer high) {
    this.high = high;
  }


  public ScanSummary medium(Integer medium) {
    
    this.medium = medium;
    return this;
  }

   /**
   * The number of Medium severity vulnerabilities
   * @return medium
  **/
  @jakarta.annotation.Nullable
  public Integer getMedium() {
    return medium;
  }


  public void setMedium(Integer medium) {
    this.medium = medium;
  }


  public ScanSummary low(Integer low) {
    
    this.low = low;
    return this;
  }

   /**
   * The number of Low severity vulnerabilities
   * @return low
  **/
  @jakarta.annotation.Nullable
  public Integer getLow() {
    return low;
  }


  public void setLow(Integer low) {
    this.low = low;
  }


  public ScanSummary negligible(Integer negligible) {
    
    this.negligible = negligible;
    return this;
  }

   /**
   * The number of Negligible severity vulnerabilities
   * @return negligible
  **/
  @jakarta.annotation.Nullable
  public Integer getNegligible() {
    return negligible;
  }


  public void setNegligible(Integer negligible) {
    this.negligible = negligible;
  }


  public ScanSummary unknown(Integer unknown) {
    
    this.unknown = unknown;
    return this;
  }

   /**
   * The number of Unknown severity vulnerabilities
   * @return unknown
  **/
  @jakarta.annotation.Nullable
  public Integer getUnknown() {
    return unknown;
  }


  public void setUnknown(Integer unknown) {
    this.unknown = unknown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanSummary scanSummary = (ScanSummary) o;
    return Objects.equals(this.fixable, scanSummary.fixable) &&
        Objects.equals(this.total, scanSummary.total) &&
        Objects.equals(this.critical, scanSummary.critical) &&
        Objects.equals(this.high, scanSummary.high) &&
        Objects.equals(this.medium, scanSummary.medium) &&
        Objects.equals(this.low, scanSummary.low) &&
        Objects.equals(this.negligible, scanSummary.negligible) &&
        Objects.equals(this.unknown, scanSummary.unknown);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixable, total, critical, high, medium, low, negligible, unknown);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanSummary {\n");
    sb.append("    fixable: ").append(toIndentedString(fixable)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    critical: ").append(toIndentedString(critical)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    negligible: ").append(toIndentedString(negligible)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixable");
    openapiFields.add("total");
    openapiFields.add("critical");
    openapiFields.add("high");
    openapiFields.add("medium");
    openapiFields.add("low");
    openapiFields.add("negligible");
    openapiFields.add("unknown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ScanSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanSummary is not found in the empty JSON string", ScanSummary.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanSummary>() {
           @Override
           public void write(JsonWriter out, ScanSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScanSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScanSummary
  * @throws IOException if the JSON string is invalid with respect to ScanSummary
  */
  public static ScanSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanSummary.class);
  }

 /**
  * Convert an instance of ScanSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
