/*
 * FINBOURNE Scheduler API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.scheduler.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.scheduler.JSON;

/**
 * 
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UploadImageInstructions {
  public static final String SERIALIZED_NAME_DOCKER_LOGIN_COMMAND = "dockerLoginCommand";
  @SerializedName(SERIALIZED_NAME_DOCKER_LOGIN_COMMAND)
  private String dockerLoginCommand;

  public static final String SERIALIZED_NAME_BUILD_VERSIONED_DOCKER_IMAGE_COMMAND = "buildVersionedDockerImageCommand";
  @SerializedName(SERIALIZED_NAME_BUILD_VERSIONED_DOCKER_IMAGE_COMMAND)
  private String buildVersionedDockerImageCommand;

  public static final String SERIALIZED_NAME_TAG_VERSIONED_DOCKER_IMAGE_COMMAND = "tagVersionedDockerImageCommand";
  @SerializedName(SERIALIZED_NAME_TAG_VERSIONED_DOCKER_IMAGE_COMMAND)
  private String tagVersionedDockerImageCommand;

  public static final String SERIALIZED_NAME_PUSH_VERSIONED_DOCKER_IMAGE_COMMAND = "pushVersionedDockerImageCommand";
  @SerializedName(SERIALIZED_NAME_PUSH_VERSIONED_DOCKER_IMAGE_COMMAND)
  private String pushVersionedDockerImageCommand;

  public static final String SERIALIZED_NAME_TAG_LATEST_DOCKER_IMAGE_COMMAND = "tagLatestDockerImageCommand";
  @SerializedName(SERIALIZED_NAME_TAG_LATEST_DOCKER_IMAGE_COMMAND)
  private String tagLatestDockerImageCommand;

  public static final String SERIALIZED_NAME_PUSH_LATEST_DOCKER_IMAGE_COMMAND = "pushLatestDockerImageCommand";
  @SerializedName(SERIALIZED_NAME_PUSH_LATEST_DOCKER_IMAGE_COMMAND)
  private String pushLatestDockerImageCommand;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private OffsetDateTime expiryTime;

  public UploadImageInstructions() {
  }

  public UploadImageInstructions dockerLoginCommand(String dockerLoginCommand) {
    
    this.dockerLoginCommand = dockerLoginCommand;
    return this;
  }

   /**
   * Get dockerLoginCommand
   * @return dockerLoginCommand
  **/
  @jakarta.annotation.Nonnull
  public String getDockerLoginCommand() {
    return dockerLoginCommand;
  }


  public void setDockerLoginCommand(String dockerLoginCommand) {
    this.dockerLoginCommand = dockerLoginCommand;
  }


  public UploadImageInstructions buildVersionedDockerImageCommand(String buildVersionedDockerImageCommand) {
    
    this.buildVersionedDockerImageCommand = buildVersionedDockerImageCommand;
    return this;
  }

   /**
   * Get buildVersionedDockerImageCommand
   * @return buildVersionedDockerImageCommand
  **/
  @jakarta.annotation.Nonnull
  public String getBuildVersionedDockerImageCommand() {
    return buildVersionedDockerImageCommand;
  }


  public void setBuildVersionedDockerImageCommand(String buildVersionedDockerImageCommand) {
    this.buildVersionedDockerImageCommand = buildVersionedDockerImageCommand;
  }


  public UploadImageInstructions tagVersionedDockerImageCommand(String tagVersionedDockerImageCommand) {
    
    this.tagVersionedDockerImageCommand = tagVersionedDockerImageCommand;
    return this;
  }

   /**
   * Get tagVersionedDockerImageCommand
   * @return tagVersionedDockerImageCommand
  **/
  @jakarta.annotation.Nonnull
  public String getTagVersionedDockerImageCommand() {
    return tagVersionedDockerImageCommand;
  }


  public void setTagVersionedDockerImageCommand(String tagVersionedDockerImageCommand) {
    this.tagVersionedDockerImageCommand = tagVersionedDockerImageCommand;
  }


  public UploadImageInstructions pushVersionedDockerImageCommand(String pushVersionedDockerImageCommand) {
    
    this.pushVersionedDockerImageCommand = pushVersionedDockerImageCommand;
    return this;
  }

   /**
   * Get pushVersionedDockerImageCommand
   * @return pushVersionedDockerImageCommand
  **/
  @jakarta.annotation.Nonnull
  public String getPushVersionedDockerImageCommand() {
    return pushVersionedDockerImageCommand;
  }


  public void setPushVersionedDockerImageCommand(String pushVersionedDockerImageCommand) {
    this.pushVersionedDockerImageCommand = pushVersionedDockerImageCommand;
  }


  public UploadImageInstructions tagLatestDockerImageCommand(String tagLatestDockerImageCommand) {
    
    this.tagLatestDockerImageCommand = tagLatestDockerImageCommand;
    return this;
  }

   /**
   * Get tagLatestDockerImageCommand
   * @return tagLatestDockerImageCommand
  **/
  @jakarta.annotation.Nullable
  public String getTagLatestDockerImageCommand() {
    return tagLatestDockerImageCommand;
  }


  public void setTagLatestDockerImageCommand(String tagLatestDockerImageCommand) {
    this.tagLatestDockerImageCommand = tagLatestDockerImageCommand;
  }


  public UploadImageInstructions pushLatestDockerImageCommand(String pushLatestDockerImageCommand) {
    
    this.pushLatestDockerImageCommand = pushLatestDockerImageCommand;
    return this;
  }

   /**
   * Get pushLatestDockerImageCommand
   * @return pushLatestDockerImageCommand
  **/
  @jakarta.annotation.Nullable
  public String getPushLatestDockerImageCommand() {
    return pushLatestDockerImageCommand;
  }


  public void setPushLatestDockerImageCommand(String pushLatestDockerImageCommand) {
    this.pushLatestDockerImageCommand = pushLatestDockerImageCommand;
  }


  public UploadImageInstructions expiryTime(OffsetDateTime expiryTime) {
    
    this.expiryTime = expiryTime;
    return this;
  }

   /**
   * Get expiryTime
   * @return expiryTime
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getExpiryTime() {
    return expiryTime;
  }


  public void setExpiryTime(OffsetDateTime expiryTime) {
    this.expiryTime = expiryTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadImageInstructions uploadImageInstructions = (UploadImageInstructions) o;
    return Objects.equals(this.dockerLoginCommand, uploadImageInstructions.dockerLoginCommand) &&
        Objects.equals(this.buildVersionedDockerImageCommand, uploadImageInstructions.buildVersionedDockerImageCommand) &&
        Objects.equals(this.tagVersionedDockerImageCommand, uploadImageInstructions.tagVersionedDockerImageCommand) &&
        Objects.equals(this.pushVersionedDockerImageCommand, uploadImageInstructions.pushVersionedDockerImageCommand) &&
        Objects.equals(this.tagLatestDockerImageCommand, uploadImageInstructions.tagLatestDockerImageCommand) &&
        Objects.equals(this.pushLatestDockerImageCommand, uploadImageInstructions.pushLatestDockerImageCommand) &&
        Objects.equals(this.expiryTime, uploadImageInstructions.expiryTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dockerLoginCommand, buildVersionedDockerImageCommand, tagVersionedDockerImageCommand, pushVersionedDockerImageCommand, tagLatestDockerImageCommand, pushLatestDockerImageCommand, expiryTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadImageInstructions {\n");
    sb.append("    dockerLoginCommand: ").append(toIndentedString(dockerLoginCommand)).append("\n");
    sb.append("    buildVersionedDockerImageCommand: ").append(toIndentedString(buildVersionedDockerImageCommand)).append("\n");
    sb.append("    tagVersionedDockerImageCommand: ").append(toIndentedString(tagVersionedDockerImageCommand)).append("\n");
    sb.append("    pushVersionedDockerImageCommand: ").append(toIndentedString(pushVersionedDockerImageCommand)).append("\n");
    sb.append("    tagLatestDockerImageCommand: ").append(toIndentedString(tagLatestDockerImageCommand)).append("\n");
    sb.append("    pushLatestDockerImageCommand: ").append(toIndentedString(pushLatestDockerImageCommand)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dockerLoginCommand");
    openapiFields.add("buildVersionedDockerImageCommand");
    openapiFields.add("tagVersionedDockerImageCommand");
    openapiFields.add("pushVersionedDockerImageCommand");
    openapiFields.add("tagLatestDockerImageCommand");
    openapiFields.add("pushLatestDockerImageCommand");
    openapiFields.add("expiryTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dockerLoginCommand");
    openapiRequiredFields.add("buildVersionedDockerImageCommand");
    openapiRequiredFields.add("tagVersionedDockerImageCommand");
    openapiRequiredFields.add("pushVersionedDockerImageCommand");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UploadImageInstructions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadImageInstructions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadImageInstructions is not found in the empty JSON string", UploadImageInstructions.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadImageInstructions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dockerLoginCommand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerLoginCommand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerLoginCommand").toString()));
      }
      if (!jsonObj.get("buildVersionedDockerImageCommand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildVersionedDockerImageCommand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildVersionedDockerImageCommand").toString()));
      }
      if (!jsonObj.get("tagVersionedDockerImageCommand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagVersionedDockerImageCommand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagVersionedDockerImageCommand").toString()));
      }
      if (!jsonObj.get("pushVersionedDockerImageCommand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pushVersionedDockerImageCommand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pushVersionedDockerImageCommand").toString()));
      }
      if ((jsonObj.get("tagLatestDockerImageCommand") != null && !jsonObj.get("tagLatestDockerImageCommand").isJsonNull()) && !jsonObj.get("tagLatestDockerImageCommand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagLatestDockerImageCommand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagLatestDockerImageCommand").toString()));
      }
      if ((jsonObj.get("pushLatestDockerImageCommand") != null && !jsonObj.get("pushLatestDockerImageCommand").isJsonNull()) && !jsonObj.get("pushLatestDockerImageCommand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pushLatestDockerImageCommand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pushLatestDockerImageCommand").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadImageInstructions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadImageInstructions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadImageInstructions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadImageInstructions.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadImageInstructions>() {
           @Override
           public void write(JsonWriter out, UploadImageInstructions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadImageInstructions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UploadImageInstructions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UploadImageInstructions
  * @throws IOException if the JSON string is invalid with respect to UploadImageInstructions
  */
  public static UploadImageInstructions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadImageInstructions.class);
  }

 /**
  * Convert an instance of UploadImageInstructions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
