/*
 * FINBOURNE Scheduler API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.scheduler.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.scheduler.JSON;

/**
 * Information related to a jobs required access to resources
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RequiredResources {
  public static final String SERIALIZED_NAME_LUSID_APIS = "lusidApis";
  @SerializedName(SERIALIZED_NAME_LUSID_APIS)
  private List<String> lusidApis;

  public static final String SERIALIZED_NAME_LUSID_FILE_SYSTEM = "lusidFileSystem";
  @SerializedName(SERIALIZED_NAME_LUSID_FILE_SYSTEM)
  private List<String> lusidFileSystem;

  public static final String SERIALIZED_NAME_EXTERNAL_CALLS = "externalCalls";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CALLS)
  private List<String> externalCalls;

  public RequiredResources() {
  }

  public RequiredResources lusidApis(List<String> lusidApis) {
    
    this.lusidApis = lusidApis;
    return this;
  }

  public RequiredResources addLusidApisItem(String lusidApisItem) {
    if (this.lusidApis == null) {
      this.lusidApis = new ArrayList<>();
    }
    this.lusidApis.add(lusidApisItem);
    return this;
  }

   /**
   * List of LUSID APIs the job needs access to
   * @return lusidApis
  **/
  @jakarta.annotation.Nullable
  public List<String> getLusidApis() {
    return lusidApis;
  }


  public void setLusidApis(List<String> lusidApis) {
    this.lusidApis = lusidApis;
  }


  public RequiredResources lusidFileSystem(List<String> lusidFileSystem) {
    
    this.lusidFileSystem = lusidFileSystem;
    return this;
  }

  public RequiredResources addLusidFileSystemItem(String lusidFileSystemItem) {
    if (this.lusidFileSystem == null) {
      this.lusidFileSystem = new ArrayList<>();
    }
    this.lusidFileSystem.add(lusidFileSystemItem);
    return this;
  }

   /**
   * List of S3 bucket or folder names that the job can access
   * @return lusidFileSystem
  **/
  @jakarta.annotation.Nullable
  public List<String> getLusidFileSystem() {
    return lusidFileSystem;
  }


  public void setLusidFileSystem(List<String> lusidFileSystem) {
    this.lusidFileSystem = lusidFileSystem;
  }


  public RequiredResources externalCalls(List<String> externalCalls) {
    
    this.externalCalls = externalCalls;
    return this;
  }

  public RequiredResources addExternalCallsItem(String externalCallsItem) {
    if (this.externalCalls == null) {
      this.externalCalls = new ArrayList<>();
    }
    this.externalCalls.add(externalCallsItem);
    return this;
  }

   /**
   * External URLs that the job can call
   * @return externalCalls
  **/
  @jakarta.annotation.Nullable
  public List<String> getExternalCalls() {
    return externalCalls;
  }


  public void setExternalCalls(List<String> externalCalls) {
    this.externalCalls = externalCalls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequiredResources requiredResources = (RequiredResources) o;
    return Objects.equals(this.lusidApis, requiredResources.lusidApis) &&
        Objects.equals(this.lusidFileSystem, requiredResources.lusidFileSystem) &&
        Objects.equals(this.externalCalls, requiredResources.externalCalls);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lusidApis, lusidFileSystem, externalCalls);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequiredResources {\n");
    sb.append("    lusidApis: ").append(toIndentedString(lusidApis)).append("\n");
    sb.append("    lusidFileSystem: ").append(toIndentedString(lusidFileSystem)).append("\n");
    sb.append("    externalCalls: ").append(toIndentedString(externalCalls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lusidApis");
    openapiFields.add("lusidFileSystem");
    openapiFields.add("externalCalls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RequiredResources
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequiredResources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequiredResources is not found in the empty JSON string", RequiredResources.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("lusidApis") != null && !jsonObj.get("lusidApis").isJsonNull() && !jsonObj.get("lusidApis").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidApis` to be an array in the JSON string but got `%s`", jsonObj.get("lusidApis").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lusidFileSystem") != null && !jsonObj.get("lusidFileSystem").isJsonNull() && !jsonObj.get("lusidFileSystem").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lusidFileSystem` to be an array in the JSON string but got `%s`", jsonObj.get("lusidFileSystem").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("externalCalls") != null && !jsonObj.get("externalCalls").isJsonNull() && !jsonObj.get("externalCalls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalCalls` to be an array in the JSON string but got `%s`", jsonObj.get("externalCalls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequiredResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequiredResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequiredResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequiredResources.class));

       return (TypeAdapter<T>) new TypeAdapter<RequiredResources>() {
           @Override
           public void write(JsonWriter out, RequiredResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequiredResources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequiredResources given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequiredResources
  * @throws IOException if the JSON string is invalid with respect to RequiredResources
  */
  public static RequiredResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequiredResources.class);
  }

 /**
  * Convert an instance of RequiredResources to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
